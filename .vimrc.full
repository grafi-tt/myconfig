"
" Plugins
"
let s:myvimruntime=split(&runtimepath, ',')[0]
if has('vim_starting')
    execute 'set runtimepath+='.s:myvimruntime.'/vim-filetype-haskell'
    execute 'set runtimepath+='.s:myvimruntime.'/bundle/neobundle.vim'
endif

call neobundle#begin(expand(s:myvimruntime.'/bundle/'))

NeoBundle 'Shougo/vimproc', {
      \ 'build' : {
      \     'windows' : 'make -f make_mingw32.mak',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'unix' : 'make -f make_unix.mak',
      \     },
      \ }
NeoBundle 'Shougo/neobundle.vim'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neosnippet.vim'
NeoBundle 'Shougo/neosnippet-snippets'

NeoBundle 'editorconfig/editorconfig-vim'

NeoBundle 'thinca/vim-quickrun'
NeoBundle 'thinca/vim-ref'

NeoBundle 'kana/vim-textobj-user'
NeoBundle 'kana/vim-textobj-fold'
NeoBundle 'kana/vim-textobj-indent'
NeoBundle 'tpope/vim-surround'

NeoBundle 'vim-scripts/sudo.vim'

NeoBundle 'eagletmt/ghcmod-vim'
NeoBundle 'tikhomirov/vim-glsl'
NeoBundle 'LaTeX-Box-Team/LaTeX-Box'
NeoBundle 'def-lkb/vimbufsync'
NeoBundle 'the-lambda-church/coquille'
NeoBundle 'derekelkins/agda-vim'

NeoBundleLazy 'kana/vim-vspec'

call neobundle#end()

filetype plugin indent on

"
" files
"
set history=50
set backup
set backupdir=~/.vim_backup
set swapfile
set directory=~/.vim_swap
set cryptmethod=blowfish2
set clipboard=unnamed,unnamedplus
set tags=./tags,tags

"
" appearance
"
if !has('gui_running')
    let g:desert256mod_termtrans = 1
end
colorscheme desert256mod

"
" keymaps
"
"" window
nnoremap <Space>t :<C-U>split<CR>
nnoremap <Space>v :<C-U>vsplit<CR>
nnoremap <Space>h <C-W>h
nnoremap <Space>j <C-W>j
nnoremap <Space>k <C-W>k
nnoremap <Space>l <C-W>l
nnoremap <Space>H <C-W>H
nnoremap <Space>J <C-W>J
nnoremap <Space>K <C-W>K
nnoremap <Space>L <C-W>L
nnoremap <Space>r <C-W>r
nnoremap <Space>= <C-W>=
nnoremap <Space>> <C-W>>
nnoremap <Space>< <C-W><
nnoremap <Space>+ <C-W>+
nnoremap <Space>- <C-W>-

nnoremap <Space>f :<C-U>Unite buffer<CR>
nnoremap <Space>o :<C-U>Unite file<CR>

"" open vimrc
nnoremap <silent> <Space>/ :<C-U>edit $HOME/.editorconfig<CR>
nnoremap <silent> <Space>. :<C-U>edit $MYVIMRC.full<CR>
nnoremap <silent> <Space>, :<C-U>edit $MYVIMRC<CR>
nnoremap <silent> <Space>m :<C-U>source $MYVIMRC<CR>

"" <Leader>
let mapleader = ","
"" lint
nnoremap <silent> <LEADER>l :<C-U>QuickRun <C-R>='_lint_' . &filetype<CR><CR>
"" NeoSnippet
imap <C-L> <Plug>(neosnippet_expand_or_jump)
smap <C-L> <Plug>(neosnippet_expand_or_jump)
xmap <C-L> <Plug>(neosnippet_expand_target)
"" omni completion
inoremap <C-K> <C-X><C-O>
"" LaTeX-Box
"let g:LatexBox_no_mappings = 1

"
" Plugin Settings
"
"" quickrun
let g:quickrun_config = {
      \ '_' : {
      \     'runner' : 'vimproc',
      \     'runner/vimproc/updatetime' : 60
      \     }
      \ }
let g:quickrun_config.tex = {
      \ 'command'   : 'latexmk',
      \ 'outputter' : 'error',
      \ 'outputter/error/error' : 'buffer',
      \ 'cmdopt'    : '-f --synctex=1',
      \ 'exec'      : '%c %o %s'
      \ }
let g:quickrun_config._lint_ruby = {
      \ 'command'   : 'ruby',
      \ 'outputter' : 'quickfix',
      \ 'cmdopt'    : '-c',
      \ 'exec'      : '%c %o %s'
      \ }
let g:quickrun_config._lint_haskell = {
      \ 'command'   : 'ghc-mod',
      \ 'outputter' : 'quickfix',
      \ 'cmdopt'    : '-b "\n"',
      \ 'exec'      : '%c %o check %s:p:r'
      \ }

"
" autocmd
"
augroup VimRCFullFileType
  autocmd!
  autocmd FileType vim
        \ lnoremap <silent> <buffer> \ ;|
        \ lnoremap <silent> <buffer> ; \
  autocmd FileType *tex setlocal spell |
        \ lnoremap <silent> <buffer> \ ;|
        \ lnoremap <silent> <buffer> ; \
  autocmd FileType text setlocal textwidth=0
  autocmd FileType vimshell setlocal nonumber
  autocmd FileType haskell
        \ noremap <C-K> :<C-U>GhcModType<CR>
  autocmd FileType *
        \ if &omnifunc == "" |
        \   setlocal omnifunc=syntaxcomplete#Complete |
        \ endif
augroup END
